[
    {
        "instruction": "(define (domain blocks-world)\n  (:requirements :strips :typing)\n  (:types block table - object)\n  (:predicates \n    (on ?x - block ?y - object)\n    (clear ?x - object)\n    (handempty)\n  )\n  \n  (:action pickup\n    :parameters (?x - block)\n    :precondition (and (clear ?x) (on ?x table) (handempty))\n    :effect (and (not (on ?x table)) (not (clear ?x)) (not (handempty)))\n  )\n\n  (:action putdown\n    :parameters (?x - block)\n    :precondition (and (holding ?x))\n    :effect (and (not (holding ?x)) (clear ?x) (handempty) (on ?x table))\n  )\n\n  (:action stack\n    :parameters (?x - block ?y - block)\n    :precondition (and (holding ?x) (clear ?y))\n    :effect (and (not (holding ?x)) (not (clear ?y)) (clear ?x) (handempty) (on ?x ?y))\n  )\n\n  (:action unstack\n    :parameters (?x - block ?y - block)\n    :precondition (and (on ?x ?y) (clear ?x) (handempty))\n    :effect (and (holding ?x) (clear ?y) (not (clear ?x)) (not (handempty)) (not (on ?x ?y)))\n  )\n)",
        "input": "(define (problem blocks-problem)\n  (:domain blocks-world)\n  (:requirements :strips :typing)\n  (:objects\n    blockA blockB blockC - block\n    table - table\n  )\n  (:init\n    (clear blockA)\n    (clear blockB)\n    (clear blockC)\n    (on blockA table)\n    (on blockB table)\n    (on blockC table)\n    (handempty)\n  )\n  (:goal\n    (and\n      (on blockA blockB)\n      (on blockB blockC)\n      (on blockC table)\n    )\n  )\n)",
        "output": "(pickup blockC)\n(putdown blockC)\n(pickup blockB)\n(stack blockB blockC)\n(pickup blockA)\n(stack blockA blockB)"
    }
]