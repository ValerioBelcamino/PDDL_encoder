[
    {
        "instruction": "(define (domain floor-tile)\n(:requirements :typing :action-costs)\n(:types robot tile color - object)\n\n(:predicates\n(robot-at ?r - robot ?x - tile)\n(up ?x - tile ?y - tile)\n(down ?x - tile ?y - tile)\n(right ?x - tile ?y - tile)\n(left ?x - tile ?y - tile)\n\n(clear ?x - tile)\n(painted ?x - tile ?c - color)\n(robot-has ?r - robot ?c - color)\n(available-color ?c - color)\n(free-color ?r - robot)\n)\n\n(:functions (total-cost) - number)\n\n(:action change-color\n:parameters (?r - robot ?c - color ?c2 - color)\n:precondition (and (robot-has ?r ?c) (available-color ?c2))\n:effect (and (not (robot-has ?r ?c)) (robot-has ?r ?c2)\n(increase (total-cost) 5))\n)\n\n(:action paint-up\n:parameters (?r - robot ?y - tile ?x - tile ?c - color)\n:precondition (and (robot-has ?r ?c) (robot-at ?r ?x) (up ?y ?x) (clear ?y))\n:effect (and (not (clear ?y)) (painted ?y ?c)\n(increase (total-cost) 2))\n)\n\n(:action paint-down\n:parameters (?r - robot ?y - tile ?x - tile ?c - color)\n:precondition (and (robot-has ?r ?c) (robot-at ?r ?x) (down ?y ?x) (clear ?y))\n:effect (and (not (clear ?y)) (painted ?y ?c)\n(increase (total-cost) 2))\n)\n\n(:action up\n:parameters (?r - robot ?x - tile ?y - tile)\n:precondition (and (robot-at ?r ?x) (up ?y ?x) (clear ?y))\n:effect (and (robot-at ?r ?y) (not (robot-at ?r ?x))\n(clear ?x) (not (clear ?y))\n(increase (total-cost) 3))\n)\n\n(:action down\n:parameters (?r - robot ?x - tile ?y - tile)\n:precondition (and (robot-at ?r ?x) (down ?y ?x) (clear ?y))\n:effect (and (robot-at ?r ?y) (not (robot-at ?r ?x))\n(clear ?x) (not (clear ?y))\n(increase (total-cost) 1))\n)\n\n(:action right\n:parameters (?r - robot ?x - tile ?y - tile)\n:precondition (and (robot-at ?r ?x) (right ?y ?x) (clear ?y))\n:effect (and (robot-at ?r ?y) (not (robot-at ?r ?x))\n(clear ?x) (not (clear ?y))\n(increase (total-cost) 1))\n)\n\n(:action left\n:parameters (?r - robot ?x - tile ?y - tile)\n:precondition (and (robot-at ?r ?x) (left ?y ?x) (clear ?y))\n:effect (and (robot-at ?r ?y) (not (robot-at ?r ?x))\n(clear ?x) (not (clear ?y))\n(increase (total-cost) 1))\n)\n\n)",
        "input": "(define (problem floor-tile_problem_000001991)\n(:domain floor-tile)\n(:requirements :action-costs :typing)\n(:objects c0 c1 - color r0 - robot tile_0-0 tile_0-1 tile_0-2 tile_0-3 tile_1-0 tile_1-1 tile_1-2 tile_1-3 tile_2-0 tile_2-1 tile_2-2 tile_2-3 tile_3-0 tile_3-1 tile_3-2 tile_3-3 tile_4-0 tile_4-1 tile_4-2 tile_4-3 - tile)\n(:init (= (total-cost) 0.0) (available-color c0) (available-color c1) (clear tile_0-0) (clear tile_0-1) (clear tile_0-2) (clear tile_0-3) (clear tile_1-0) (clear tile_1-1) (clear tile_1-2) (clear tile_1-3) (clear tile_2-0) (clear tile_2-1) (clear tile_2-3) (clear tile_3-0) (clear tile_3-1) (clear tile_3-2) (clear tile_3-3) (clear tile_4-0) (clear tile_4-1) (clear tile_4-2) (clear tile_4-3) (down tile_0-0 tile_1-0) (down tile_0-1 tile_1-1) (down tile_0-2 tile_1-2) (down tile_0-3 tile_1-3) (down tile_1-0 tile_2-0) (down tile_1-1 tile_2-1) (down tile_1-2 tile_2-2) (down tile_1-3 tile_2-3) (down tile_2-0 tile_3-0) (down tile_2-1 tile_3-1) (down tile_2-2 tile_3-2) (down tile_2-3 tile_3-3) (down tile_3-0 tile_4-0) (down tile_3-1 tile_4-1) (down tile_3-2 tile_4-2) (down tile_3-3 tile_4-3) (left tile_0-0 tile_0-1) (left tile_0-1 tile_0-2) (left tile_0-2 tile_0-3) (left tile_1-0 tile_1-1) (left tile_1-1 tile_1-2) (left tile_1-2 tile_1-3) (left tile_2-0 tile_2-1) (left tile_2-1 tile_2-2) (left tile_2-2 tile_2-3) (left tile_3-0 tile_3-1) (left tile_3-1 tile_3-2) (left tile_3-2 tile_3-3) (left tile_4-0 tile_4-1) (left tile_4-1 tile_4-2) (left tile_4-2 tile_4-3) (right tile_0-1 tile_0-0) (right tile_0-2 tile_0-1) (right tile_0-3 tile_0-2) (right tile_1-1 tile_1-0) (right tile_1-2 tile_1-1) (right tile_1-3 tile_1-2) (right tile_2-1 tile_2-0) (right tile_2-2 tile_2-1) (right tile_2-3 tile_2-2) (right tile_3-1 tile_3-0) (right tile_3-2 tile_3-1) (right tile_3-3 tile_3-2) (right tile_4-1 tile_4-0) (right tile_4-2 tile_4-1) (right tile_4-3 tile_4-2) (robot-at r0 tile_2-2) (robot-has r0 c0) (up tile_1-0 tile_0-0) (up tile_1-1 tile_0-1) (up tile_1-2 tile_0-2) (up tile_1-3 tile_0-3) (up tile_2-0 tile_1-0) (up tile_2-1 tile_1-1) (up tile_2-2 tile_1-2) (up tile_2-3 tile_1-3) (up tile_3-0 tile_2-0) (up tile_3-1 tile_2-1) (up tile_3-2 tile_2-2) (up tile_3-3 tile_2-3) (up tile_4-0 tile_3-0) (up tile_4-1 tile_3-1) (up tile_4-2 tile_3-2) (up tile_4-3 tile_3-3))\n(:goal (and (painted tile_4-3 c0) (painted tile_4-1 c0) (painted tile_1-0 c0) (painted tile_2-2 c1) (painted tile_1-1 c1) (painted tile_3-0 c0) (painted tile_3-1 c1) (painted tile_2-0 c1) (painted tile_2-1 c0) (painted tile_3-3 c1) (painted tile_4-2 c1) (painted tile_3-2 c0) (painted tile_1-2 c0) (painted tile_2-3 c0) (painted tile_4-0 c1) (painted tile_1-3 c1)))\n(:metric minimize (total-cost))\n)",
        "output": "0.00100: (change-color r0 c0 c1)\n0.00300: (up r0 tile_2-2 tile_3-2)\n0.00500: (paint-up r0 tile_4-2 tile_3-2 c1)\n0.00700: (left r0 tile_3-2 tile_3-1)\n0.00900: (change-color r0 c1 c0)\n0.01100: (paint-up r0 tile_4-1 tile_3-1 c0)\n0.01300: (down r0 tile_3-1 tile_2-1)\n0.01500: (change-color r0 c0 c1)\n0.01700: (paint-up r0 tile_3-1 tile_2-1 c1)\n0.01900: (right r0 tile_2-1 tile_2-2)\n0.02100: (change-color r0 c1 c0)\n0.02300: (paint-up r0 tile_3-2 tile_2-2 c0)\n0.02500: (left r0 tile_2-2 tile_2-1)\n0.02700: (down r0 tile_2-1 tile_1-1)\n0.02900: (paint-up r0 tile_2-1 tile_1-1 c0)\n0.03100: (right r0 tile_1-1 tile_1-2)\n0.03300: (change-color r0 c0 c1)\n0.03500: (paint-up r0 tile_2-2 tile_1-2 c1)\n0.03700: (left r0 tile_1-2 tile_1-1)\n0.03900: (down r0 tile_1-1 tile_0-1)\n0.04100: (paint-up r0 tile_1-1 tile_0-1 c1)\n0.04300: (right r0 tile_0-1 tile_0-2)\n0.04500: (change-color r0 c1 c0)\n0.04700: (paint-up r0 tile_1-2 tile_0-2 c0)\n0.04900: (right r0 tile_0-2 tile_0-3)\n0.05100: (up r0 tile_0-3 tile_1-3)\n0.05300: (up r0 tile_1-3 tile_2-3)\n0.05500: (up r0 tile_2-3 tile_3-3)\n0.05700: (paint-up r0 tile_4-3 tile_3-3 c0)\n0.05900: (down r0 tile_3-3 tile_2-3)\n0.06100: (down r0 tile_2-3 tile_1-3)\n0.06300: (down r0 tile_1-3 tile_0-3)\n0.06500: (left r0 tile_0-3 tile_0-2)\n0.06700: (left r0 tile_0-2 tile_0-1)\n0.06900: (left r0 tile_0-1 tile_0-0)\n0.07100: (up r0 tile_0-0 tile_1-0)\n0.07300: (up r0 tile_1-0 tile_2-0)\n0.07500: (up r0 tile_2-0 tile_3-0)\n0.07700: (change-color r0 c0 c1)\n0.07900: (paint-up r0 tile_4-0 tile_3-0 c1)\n0.08100: (down r0 tile_3-0 tile_2-0)\n0.08300: (change-color r0 c1 c0)\n0.08500: (paint-up r0 tile_3-0 tile_2-0 c0)\n0.08700: (change-color r0 c0 c1)\n0.08900: (down r0 tile_2-0 tile_1-0)\n0.09100: (paint-up r0 tile_2-0 tile_1-0 c1)\n0.09300: (down r0 tile_1-0 tile_0-0)\n0.09500: (change-color r0 c1 c0)\n0.09700: (paint-up r0 tile_1-0 tile_0-0 c0)\n0.09900: (change-color r0 c0 c1)\n0.10100: (right r0 tile_0-0 tile_0-1)\n0.10300: (right r0 tile_0-1 tile_0-2)\n0.10500: (right r0 tile_0-2 tile_0-3)\n0.10700: (up r0 tile_0-3 tile_1-3)\n0.10900: (up r0 tile_1-3 tile_2-3)\n0.11100: (paint-up r0 tile_3-3 tile_2-3 c1)\n0.11300: (down r0 tile_2-3 tile_1-3)\n0.11500: (change-color r0 c1 c0)\n0.11700: (paint-up r0 tile_2-3 tile_1-3 c0)\n0.11900: (change-color r0 c0 c1)\n0.12100: (down r0 tile_1-3 tile_0-3)\n0.12300: (paint-up r0 tile_1-3 tile_0-3 c1)\n\nEND"
    },
    {
        "instruction": "(define (domain floor-tile)\n(:requirements :typing :action-costs)\n(:types robot tile color - object)\n\n(:predicates\n(robot-at ?r - robot ?x - tile)\n(up ?x - tile ?y - tile)\n(down ?x - tile ?y - tile)\n(right ?x - tile ?y - tile)\n(left ?x - tile ?y - tile)\n\n(clear ?x - tile)\n(painted ?x - tile ?c - color)\n(robot-has ?r - robot ?c - color)\n(available-color ?c - color)\n(free-color ?r - robot)\n)\n\n(:functions (total-cost) - number)\n\n(:action change-color\n:parameters (?r - robot ?c - color ?c2 - color)\n:precondition (and (robot-has ?r ?c) (available-color ?c2))\n:effect (and (not (robot-has ?r ?c)) (robot-has ?r ?c2)\n(increase (total-cost) 5))\n)\n\n(:action paint-up\n:parameters (?r - robot ?y - tile ?x - tile ?c - color)\n:precondition (and (robot-has ?r ?c) (robot-at ?r ?x) (up ?y ?x) (clear ?y))\n:effect (and (not (clear ?y)) (painted ?y ?c)\n(increase (total-cost) 2))\n)\n\n(:action paint-down\n:parameters (?r - robot ?y - tile ?x - tile ?c - color)\n:precondition (and (robot-has ?r ?c) (robot-at ?r ?x) (down ?y ?x) (clear ?y))\n:effect (and (not (clear ?y)) (painted ?y ?c)\n(increase (total-cost) 2))\n)\n\n(:action up\n:parameters (?r - robot ?x - tile ?y - tile)\n:precondition (and (robot-at ?r ?x) (up ?y ?x) (clear ?y))\n:effect (and (robot-at ?r ?y) (not (robot-at ?r ?x))\n(clear ?x) (not (clear ?y))\n(increase (total-cost) 3))\n)\n\n(:action down\n:parameters (?r - robot ?x - tile ?y - tile)\n:precondition (and (robot-at ?r ?x) (down ?y ?x) (clear ?y))\n:effect (and (robot-at ?r ?y) (not (robot-at ?r ?x))\n(clear ?x) (not (clear ?y))\n(increase (total-cost) 1))\n)\n\n(:action right\n:parameters (?r - robot ?x - tile ?y - tile)\n:precondition (and (robot-at ?r ?x) (right ?y ?x) (clear ?y))\n:effect (and (robot-at ?r ?y) (not (robot-at ?r ?x))\n(clear ?x) (not (clear ?y))\n(increase (total-cost) 1))\n)\n\n(:action left\n:parameters (?r - robot ?x - tile ?y - tile)\n:precondition (and (robot-at ?r ?x) (left ?y ?x) (clear ?y))\n:effect (and (robot-at ?r ?y) (not (robot-at ?r ?x))\n(clear ?x) (not (clear ?y))\n(increase (total-cost) 1))\n)\n\n)",
        "input": "(define (problem floor-tile_problem_000001631)\n(:domain floor-tile)\n(:requirements :action-costs :typing)\n(:objects c0 c1 - color r0 - robot tile_0-0 tile_0-1 tile_0-2 tile_0-3 tile_1-0 tile_1-1 tile_1-2 tile_1-3 tile_2-0 tile_2-1 tile_2-2 tile_2-3 tile_3-0 tile_3-1 tile_3-2 tile_3-3 tile_4-0 tile_4-1 tile_4-2 tile_4-3 - tile)\n(:init (= (total-cost) 0.0) (available-color c0) (available-color c1) (clear tile_0-0) (clear tile_0-1) (clear tile_0-2) (clear tile_0-3) (clear tile_1-0) (clear tile_1-1) (clear tile_1-2) (clear tile_1-3) (clear tile_2-0) (clear tile_2-1) (clear tile_2-2) (clear tile_2-3) (clear tile_3-0) (clear tile_3-1) (clear tile_3-2) (clear tile_3-3) (clear tile_4-0) (clear tile_4-1) (clear tile_4-3) (down tile_0-0 tile_1-0) (down tile_0-1 tile_1-1) (down tile_0-2 tile_1-2) (down tile_0-3 tile_1-3) (down tile_1-0 tile_2-0) (down tile_1-1 tile_2-1) (down tile_1-2 tile_2-2) (down tile_1-3 tile_2-3) (down tile_2-0 tile_3-0) (down tile_2-1 tile_3-1) (down tile_2-2 tile_3-2) (down tile_2-3 tile_3-3) (down tile_3-0 tile_4-0) (down tile_3-1 tile_4-1) (down tile_3-2 tile_4-2) (down tile_3-3 tile_4-3) (left tile_0-0 tile_0-1) (left tile_0-1 tile_0-2) (left tile_0-2 tile_0-3) (left tile_1-0 tile_1-1) (left tile_1-1 tile_1-2) (left tile_1-2 tile_1-3) (left tile_2-0 tile_2-1) (left tile_2-1 tile_2-2) (left tile_2-2 tile_2-3) (left tile_3-0 tile_3-1) (left tile_3-1 tile_3-2) (left tile_3-2 tile_3-3) (left tile_4-0 tile_4-1) (left tile_4-1 tile_4-2) (left tile_4-2 tile_4-3) (right tile_0-1 tile_0-0) (right tile_0-2 tile_0-1) (right tile_0-3 tile_0-2) (right tile_1-1 tile_1-0) (right tile_1-2 tile_1-1) (right tile_1-3 tile_1-2) (right tile_2-1 tile_2-0) (right tile_2-2 tile_2-1) (right tile_2-3 tile_2-2) (right tile_3-1 tile_3-0) (right tile_3-2 tile_3-1) (right tile_3-3 tile_3-2) (right tile_4-1 tile_4-0) (right tile_4-2 tile_4-1) (right tile_4-3 tile_4-2) (robot-at r0 tile_4-2) (robot-has r0 c1) (up tile_1-0 tile_0-0) (up tile_1-1 tile_0-1) (up tile_1-2 tile_0-2) (up tile_1-3 tile_0-3) (up tile_2-0 tile_1-0) (up tile_2-1 tile_1-1) (up tile_2-2 tile_1-2) (up tile_2-3 tile_1-3) (up tile_3-0 tile_2-0) (up tile_3-1 tile_2-1) (up tile_3-2 tile_2-2) (up tile_3-3 tile_2-3) (up tile_4-0 tile_3-0) (up tile_4-1 tile_3-1) (up tile_4-2 tile_3-2) (up tile_4-3 tile_3-3))\n(:goal (and (painted tile_4-3 c0) (painted tile_4-1 c0) (painted tile_1-0 c0) (painted tile_2-2 c1) (painted tile_1-1 c1) (painted tile_3-0 c0) (painted tile_3-1 c1) (painted tile_2-0 c1) (painted tile_2-1 c0) (painted tile_3-3 c1) (painted tile_4-2 c1) (painted tile_3-2 c0) (painted tile_1-2 c0) (painted tile_2-3 c0) (painted tile_4-0 c1) (painted tile_1-3 c1)))\n(:metric minimize (total-cost))\n)",
        "output": "0.00100: (down r0 tile_4-2 tile_3-2)\n0.00300: (paint-up r0 tile_4-2 tile_3-2 c1)\n0.00500: (left r0 tile_3-2 tile_3-1)\n0.00700: (change-color r0 c1 c0)\n0.00900: (paint-up r0 tile_4-1 tile_3-1 c0)\n0.01100: (down r0 tile_3-1 tile_2-1)\n0.01300: (change-color r0 c0 c1)\n0.01500: (paint-up r0 tile_3-1 tile_2-1 c1)\n0.01700: (right r0 tile_2-1 tile_2-2)\n0.01900: (change-color r0 c1 c0)\n0.02100: (paint-up r0 tile_3-2 tile_2-2 c0)\n0.02300: (change-color r0 c0 c1)\n0.02500: (down r0 tile_2-2 tile_1-2)\n0.02700: (paint-up r0 tile_2-2 tile_1-2 c1)\n0.02900: (left r0 tile_1-2 tile_1-1)\n0.03100: (change-color r0 c1 c0)\n0.03300: (paint-up r0 tile_2-1 tile_1-1 c0)\n0.03500: (right r0 tile_1-1 tile_1-2)\n0.03700: (down r0 tile_1-2 tile_0-2)\n0.03900: (paint-up r0 tile_1-2 tile_0-2 c0)\n0.04100: (change-color r0 c0 c1)\n0.04300: (left r0 tile_0-2 tile_0-1)\n0.04500: (paint-up r0 tile_1-1 tile_0-1 c1)\n0.04700: (left r0 tile_0-1 tile_0-0)\n0.04900: (up r0 tile_0-0 tile_1-0)\n0.05100: (up r0 tile_1-0 tile_2-0)\n0.05300: (up r0 tile_2-0 tile_3-0)\n0.05500: (paint-up r0 tile_4-0 tile_3-0 c1)\n0.05700: (down r0 tile_3-0 tile_2-0)\n0.05900: (down r0 tile_2-0 tile_1-0)\n0.06100: (down r0 tile_1-0 tile_0-0)\n0.06300: (right r0 tile_0-0 tile_0-1)\n0.06500: (right r0 tile_0-1 tile_0-2)\n0.06700: (right r0 tile_0-2 tile_0-3)\n0.06900: (up r0 tile_0-3 tile_1-3)\n0.07100: (up r0 tile_1-3 tile_2-3)\n0.07300: (up r0 tile_2-3 tile_3-3)\n0.07500: (change-color r0 c1 c0)\n0.07700: (paint-up r0 tile_4-3 tile_3-3 c0)\n0.07900: (down r0 tile_3-3 tile_2-3)\n0.08100: (change-color r0 c0 c1)\n0.08300: (paint-up r0 tile_3-3 tile_2-3 c1)\n0.08500: (down r0 tile_2-3 tile_1-3)\n0.08700: (down r0 tile_1-3 tile_0-3)\n0.08900: (left r0 tile_0-3 tile_0-2)\n0.09100: (left r0 tile_0-2 tile_0-1)\n0.09300: (left r0 tile_0-1 tile_0-0)\n0.09500: (up r0 tile_0-0 tile_1-0)\n0.09700: (up r0 tile_1-0 tile_2-0)\n0.09900: (change-color r0 c1 c0)\n0.10100: (paint-up r0 tile_3-0 tile_2-0 c0)\n0.10300: (down r0 tile_2-0 tile_1-0)\n0.10500: (change-color r0 c0 c1)\n0.10700: (paint-up r0 tile_2-0 tile_1-0 c1)\n0.10900: (down r0 tile_1-0 tile_0-0)\n0.11100: (right r0 tile_0-0 tile_0-1)\n0.11300: (right r0 tile_0-1 tile_0-2)\n0.11500: (right r0 tile_0-2 tile_0-3)\n0.11700: (up r0 tile_0-3 tile_1-3)\n0.11900: (change-color r0 c1 c0)\n0.12100: (paint-up r0 tile_2-3 tile_1-3 c0)\n0.12300: (down r0 tile_1-3 tile_0-3)\n0.12500: (change-color r0 c0 c1)\n0.12700: (paint-up r0 tile_1-3 tile_0-3 c1)\n0.12900: (left r0 tile_0-3 tile_0-2)\n0.13100: (left r0 tile_0-2 tile_0-1)\n0.13300: (left r0 tile_0-1 tile_0-0)\n0.13500: (change-color r0 c1 c0)\n0.13700: (paint-up r0 tile_1-0 tile_0-0 c0)\n\nEND"
    },
    {
        "instruction": "(define (domain ferry)\n(:requirements :typing :strips :negative-preconditions :action-costs)\n(:types\ncar - object\nlocation - object )\n\n(:predicates\n(at-ferry ?l - location)\n(at ?c - car ?l - location)\n(empty-ferry)\n(on ?c - car))\n\n(:functions\n(total-cost) - number\n)\n\n(:action sail\n:parameters  (?from - location ?to - location)\n:precondition (and (at-ferry ?from) (not (at-ferry ?to)))\n:effect (and  (at-ferry ?to) (not (at-ferry ?from))\n(increase (total-cost) 1)\n))\n\n\n(:action board\n:parameters (?car - car ?loc - location)\n:precondition  (and  (at ?car ?loc) (at-ferry ?loc) (empty-ferry))\n:effect (and\n(on ?car)\n(not (at ?car ?loc))\n(not (empty-ferry))\n(increase (total-cost) 1)\n))\n\n(:action debark\n:parameters  (?car - car  ?loc - location)\n:precondition  (and (on ?car) (at-ferry ?loc))\n:effect (and\n(at ?car ?loc)\n(empty-ferry)\n(not (on ?car))\n(increase (total-cost) 1)\n))\n)",
        "input": "(define (problem ferry_problem_000002386)\n(:domain ferry)\n(:requirements :action-costs :negative-preconditions :strips :typing)\n(:objects c0 c1 c10 c11 c12 c13 c14 c15 c16 c17 c18 c19 c2 c3 c4 c5 c6 c7 c8 c9 - car l0 l1 l10 l11 l12 l2 l3 l4 l5 l6 l7 l8 l9 - location)\n(:init (= (total-cost) 0.0) (at c0 l0) (at c1 l7) (at c10 l4) (at c11 l10) (at c12 l11) (at c13 l2) (at c14 l4) (at c15 l0) (at c16 l9) (at c17 l3) (at c18 l3) (at c19 l8) (at c2 l2) (at c3 l0) (at c4 l12) (at c5 l9) (at c6 l1) (at c7 l9) (at c8 l11) (at c9 l2) (at-ferry l12) (empty-ferry))\n(:goal (and (at c10 l5) (at c17 l8) (at c3 l8) (at c6 l6) (at c15 l10) (at c7 l10) (at c0 l12) (at c14 l6) (at c2 l1) (at c19 l11) (at c12 l1)))\n(:metric minimize (total-cost))\n)",
        "output": "0.00100: (sail l12 l9)\n0.00300: (board c7 l9)\n0.00500: (sail l9 l10)\n0.00700: (debark c7 l10)\n0.00900: (sail l10 l0)\n0.01100: (board c3 l0)\n0.01300: (sail l0 l8)\n0.01500: (debark c3 l8)\n0.01700: (sail l8 l11)\n0.01900: (board c12 l11)\n0.02100: (sail l11 l1)\n0.02300: (debark c12 l1)\n0.02500: (sail l1 l8)\n0.02700: (board c19 l8)\n0.02900: (sail l8 l11)\n0.03100: (debark c19 l11)\n0.03300: (sail l11 l2)\n0.03500: (board c2 l2)\n0.03700: (sail l2 l1)\n0.03900: (debark c2 l1)\n0.04100: (sail l1 l4)\n0.04300: (board c14 l4)\n0.04500: (sail l4 l6)\n0.04700: (debark c14 l6)\n0.04900: (sail l6 l0)\n0.05100: (board c0 l0)\n0.05300: (sail l0 l12)\n0.05500: (debark c0 l12)\n0.05700: (sail l12 l0)\n0.05900: (board c15 l0)\n0.06100: (sail l0 l10)\n0.06300: (debark c15 l10)\n0.06500: (sail l10 l1)\n0.06700: (board c6 l1)\n0.06900: (sail l1 l6)\n0.07100: (debark c6 l6)\n0.07300: (sail l6 l3)\n0.07500: (board c17 l3)\n0.07700: (sail l3 l8)\n0.07900: (debark c17 l8)\n0.08100: (sail l8 l4)\n0.08300: (board c10 l4)\n0.08500: (sail l4 l5)\n0.08700: (debark c10 l5)\n\nEND"
    },
    {
        "instruction": "(define (domain blocksworld-4ops)\n(:requirements :strips :typing :action-costs)\n(:types block - object)\n(:predicates (clear ?x - block)\n(on-table ?x - block)\n(arm-empty)\n(holding ?x - block)\n(on ?x - block ?y - block)\n)\n\n(:functions\n(total-cost) - number\n)\n\n(:action pickup\n:parameters (?ob - block)\n:precondition (and (clear ?ob) (on-table ?ob) (arm-empty))\n:effect (and (holding ?ob) (not (clear ?ob)) (not (on-table ?ob))\n(not (arm-empty)) (increase (total-cost) 1)\n)\n)\n\n(:action putdown\n:parameters  (?ob - block)\n:precondition (holding ?ob)\n:effect (and (clear ?ob) (arm-empty) (on-table ?ob)\n(not (holding ?ob)) (increase (total-cost) 1)\n)\n)\n\n(:action stack\n:parameters  (?ob - block ?underob - block)\n:precondition (and (clear ?underob) (holding ?ob))\n:effect (and (arm-empty) (clear ?ob) (on ?ob ?underob)\n(not (clear ?underob)) (not (holding ?ob))\n(increase (total-cost) 1)\n)\n)\n\n(:action unstack\n:parameters  (?ob - block ?underob - block)\n:precondition (and (on ?ob ?underob) (clear ?ob) (arm-empty))\n:effect (and (holding ?ob) (clear ?underob)\n(not (on ?ob ?underob)) (not (clear ?ob)) (not (arm-empty))\n(increase (total-cost) 1)\n)\n\n)\n)",
        "input": "(define (problem blocksworld-4ops_problem_000003918)\n(:domain blocksworld-4ops)\n(:requirements :action-costs :strips :typing)\n(:objects b0 b1 b10 b11 b12 b13 b14 b15 b16 b17 b18 b19 b2 b20 b21 b22 b23 b3 b4 b5 b6 b7 b8 b9 - block)\n(:init (= (total-cost) 0.0) (arm-empty) (clear b2) (clear b3) (clear b4) (clear b5) (clear b6) (clear b7) (on b0 b1) (on b10 b11) (on b11 b12) (on b12 b13) (on b13 b14) (on b14 b15) (on b15 b16) (on b16 b17) (on b17 b18) (on b18 b19) (on b19 b20) (on b20 b21) (on b21 b22) (on b22 b23) (on b23 b0) (on b7 b8) (on b8 b9) (on b9 b10) (on-table b1) (on-table b2) (on-table b3) (on-table b4) (on-table b5) (on-table b6))\n(:goal (and (on b18 b19) (on b2 b3) (on b0 b1) (on b4 b5) (on-table b10) (on b15 b16) (on b20 b21) (on-table b11) (on-table b13) (on b23 b0) (on b21 b22) (on b17 b18) (on-table b12) (on b19 b20) (on b5 b6) (on-table b9) (on b16 b17) (on-table b8) (clear b10) (clear b11) (clear b13) (clear b14) (on b14 b15) (on b22 b23) (clear b12) (on b1 b2) (on b3 b4) (clear b9) (on b7 b8) (on b6 b7)))\n(:metric minimize (total-cost))\n)",
        "output": "0.00100: (unstack b7 b8)\n0.00300: (putdown b7)\n0.00500: (unstack b8 b9)\n0.00700: (putdown b8)\n0.00900: (unstack b9 b10)\n0.01100: (putdown b9)\n0.01300: (unstack b10 b11)\n0.01500: (putdown b10)\n0.01700: (unstack b11 b12)\n0.01900: (putdown b11)\n0.02100: (unstack b12 b13)\n0.02300: (putdown b12)\n0.02500: (unstack b13 b14)\n0.02700: (putdown b13)\n0.02900: (unstack b14 b15)\n0.03100: (putdown b14)\n0.03300: (unstack b15 b16)\n0.03500: (putdown b15)\n0.03700: (unstack b16 b17)\n0.03900: (putdown b16)\n0.04100: (unstack b17 b18)\n0.04300: (putdown b17)\n0.04500: (unstack b18 b19)\n0.04700: (putdown b18)\n0.04900: (unstack b19 b20)\n0.05100: (putdown b19)\n0.05300: (unstack b20 b21)\n0.05500: (putdown b20)\n0.05700: (unstack b21 b22)\n0.05900: (putdown b21)\n0.06100: (unstack b22 b23)\n0.06300: (putdown b22)\n0.06500: (unstack b23 b0)\n0.06700: (putdown b23)\n0.06900: (unstack b0 b1)\n0.07100: (putdown b0)\n0.07300: (pickup b7)\n0.07500: (stack b7 b8)\n0.07700: (pickup b6)\n0.07900: (stack b6 b7)\n0.08100: (pickup b5)\n0.08300: (stack b5 b6)\n0.08500: (pickup b4)\n0.08700: (stack b4 b5)\n0.08900: (pickup b3)\n0.09100: (stack b3 b4)\n0.09300: (pickup b2)\n0.09500: (stack b2 b3)\n0.09700: (pickup b1)\n0.09900: (stack b1 b2)\n0.10100: (pickup b0)\n0.10300: (stack b0 b1)\n0.10500: (pickup b23)\n0.10700: (stack b23 b0)\n0.10900: (pickup b22)\n0.11100: (stack b22 b23)\n0.11300: (pickup b21)\n0.11500: (stack b21 b22)\n0.11700: (pickup b20)\n0.11900: (stack b20 b21)\n0.12100: (pickup b19)\n0.12300: (stack b19 b20)\n0.12500: (pickup b18)\n0.12700: (stack b18 b19)\n0.12900: (pickup b17)\n0.13100: (stack b17 b18)\n0.13300: (pickup b16)\n0.13500: (stack b16 b17)\n0.13700: (pickup b15)\n0.13900: (stack b15 b16)\n0.14100: (pickup b14)\n0.14300: (stack b14 b15)\n\nEND"
    }
]